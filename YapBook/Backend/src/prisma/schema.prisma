generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id         Int       @id @default(autoincrement())
  userId     Int?
  guestId    String?
  token      String    @unique
  createdAt  DateTime  @default(now())
  expiryDate DateTime
}

model BlacklistToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  createdAt  DateTime  @default(now())
  expiryDate DateTime
  userId     Int?
  guestId    String?
}

model Post {
  id         Int       @id @default(autoincrement())
  content    String
  imageUrl   String
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  likes      Like[]    @relation("PostLikes")
  shares     Share[]   @relation("PostShares")
  comments   Comment[] @relation("PostComments")
}

model Like {
  id         Int       @id @default(autoincrement())
  userId     Int
  postId     Int?
  commentId  Int?
  createdAt  DateTime  @default(now())

  user       User     @relation("UserLikes", fields: [userId], references: [id])
  post       Post?    @relation("PostLikes", fields: [postId], references: [id])
  comment    Comment? @relation("CommentLikes", fields: [commentId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Share {
  id         Int       @id @default(autoincrement())
  userId     Int       
  postId     Int
  createdAt  DateTime  @default(now())

  user       User      @relation("UserShares", fields: [userId], references: [id])
  post       Post      @relation("PostShares", fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  userId     Int
  postId     Int
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id])
  post       Post      @relation("PostComments", fields: [postId], references: [id])
  likes      Like[]    @relation("CommentLikes")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  username   String    @unique
  bio        String?
  imageUrl   String? 

  followers  UserFollowing[] @relation("UserFollowing")
  following  UserFollowing[] @relation("UserFollowers")

  posts      Post[]
  comments   Comment[]
  likes      Like[]    @relation("UserLikes")
  shares     Share[]   @relation("UserShares")
}

model UserFollowing {
  @@id([userId, followerId])

  userId     Int
  followerId Int

  user       User @relation("UserFollowing", fields: [userId], references: [id])
  follower   User @relation("UserFollowers", fields: [followerId], references: [id])
}
